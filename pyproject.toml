[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/survey_grouping"]

[project]
name = "survey-route-grouping"
version = "0.1.0"
description = "台南市志工普查路線分組系統"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Pi Chiu", email = "rtchiou@gmail.com"},
]
maintainers = [
    {name = "Pi Chiu", email = "rtchiou@gmail.com"},
]
keywords = ["survey", "route", "grouping", "taiwan", "volunteer"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "supabase>=2.0.0",
    "pandas>=2.0.0",
    "geopandas>=0.14.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "openpyxl>=3.1.0",
    "geopy>=2.3.0",
    "shapely>=2.0.0",
    "python-dotenv>=1.0.0",
    "pyproj>=3.4.0",
    "folium>=0.15.0",
    "branca>=0.6.0",
]
requires-python = ">=3.11"

[project.urls]
Homepage = "https://github.com/pichiu/survey-route-grouping"
Repository = "https://github.com/pichiu/survey-route-grouping"
Issues = "https://github.com/pichiu/survey-route-grouping/issues"
Documentation = "https://github.com/pichiu/survey-route-grouping#readme"

[project.scripts]
survey-grouping = "survey_grouping.main:app"

[project.optional-dependencies]
# 開發依賴
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.0.290",
    "mypy>=1.5.0",
    "coverage>=7.0.0",
]
# 代碼檢查工具
lint = [
    "black>=23.0.0",
    "ruff>=0.0.290",
    "mypy>=1.5.0",
]
# 測試工具
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0",
]
# 文檔工具
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]
# 完整開發環境（包含所有工具）
all = [
    "survey-route-grouping[dev,lint,test,docs]",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "NPY", # numpy
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "S101",   # use of assert detected
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]
unfixable = [
    "F841", # remove unused variables
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "geopandas.*",
    "geopy.*",
    "supabase.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/survey_grouping",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# uv 工具配置
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.0.290",
    "mypy>=1.5.0",
    "coverage>=7.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]
